import query from '../controllers/DB/database';import PostModel from './post.model';import SubReplyModel from './sub-reply.model';import ReplyModel from './reply.model';import { removeSame } from '../controllers/libs/arr';interface deleteInter {    affectedRows: number;}interface addToDbInter {    affectedRows: number;    insertId: number;}interface newMessageInter {    ID: number;    post_id: number;    type: string;    reply_id: number;    user_id: number;}interface subReplyInter {    user_id: number;}export default class NewMessageModel {    // 获取基本信息    static async getBasic(messageId: number) {        console.log(messageId);        const sql = `SELECT * FROM new_message WHERE ID = ?`;        const row = await query(sql, [            messageId        ]).catch((err) => {            console.log(err)        })        return row;    }    // 添加新消息(回复)    static async addOne(type: string, userId: number, postId: number, replyId: number, subReplyId: number) {        const sql = `INSERT INTO new_message         (type, post_id, reply_id, user_id, sub_reply_id)         VALUES (?, ?, ?, ?, ?)        `;        const row = await query(sql, [            type,            postId,            replyId,            userId,            subReplyId        ]).catch((err) => {            console.log(err)        })        if ((<addToDbInter>row).affectedRows === 1) {            return true;        } else {            return false;        }    }    // 推送回复给楼主    static async addReply(userId: number, postUserId: number, postId: number, replyId: number, subReplyId: number) {        if (userId !== postUserId) {            await this.addOne('reply', postUserId, postId, replyId, subReplyId);        }    }    // 发散消息给当前回复下的所有人    static async addSubReply(postUserId: number, postId: number, replyId: number, subReplyId: number, subReplyUserId: number) {        const subReply = await SubReplyModel.getList(replyId);        const replyIfo = await ReplyModel.getBasic(replyId);        const replyUserId = replyIfo[0].user_id;        let userIdList = [postUserId, replyUserId];        for (let i = 0; i < (<subReplyInter[]>subReply).length; i++) {            const userId = subReply[i].user_id;            if (userId !== subReplyUserId) {                userIdList.push(userId);            }        }        userIdList = removeSame(userIdList);        for (let i = 0; i < userIdList.length; i++) {            await this.addOne('subReply', userIdList[i], postId, replyId, subReplyId);        }    }    // 获取当前用户的未读列表    static async getList(userId: number) {        const sql = `SELECT A.*        FROM new_message AS A        WHERE A.user_id = ?`;        const row = await query(sql, [            userId        ]).catch((err) => {            console.log(err)        })        return row;    }    // 已阅    static async deleteOne(messageId: number) {        console.log(messageId);        const messageList = await this.getBasic(messageId);        if ((<newMessageInter[]>messageList).length !== 0) {            const sql = `DELETE FROM new_message WHERE ID = ?`;            const row = await query(sql, [                messageId            ]).catch((err) => {                console.log(err)            })            if ((<deleteInter>row).affectedRows !== 0) {                return true;            } else {                return false;            }        } else {            return false;        }    }}